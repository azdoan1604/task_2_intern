// culumns table to SQL 
class Table{
    constructor(table){
        this.sql = []
        this.primary = []
        this.table = table
        this.ENGINE = "InnoDB"
        this._name = ""
        this.properties = []
    }
    name(columName){
        if(this.sql.length > 0)
            this.sql.push(",")
        this.sql.push("`"+columName+"`")
        this._name = columName
        this.properties.push(columName)
        return this
    }
    type(type,length = null){
        if(length !=null)
            this.sql.push(`${type}(${length})`)
        else
            this.sql.push(type)
        return this
    }
    notNull(){
        this.sql.push("not null")
        return this
    }
    unique(){
        this.sql.push("unique")
        return this
    } 
    index(){
        this.sql.push("index")
        return this
    }
    fulltext(){
        this.sql.push("fulltext")
        return this
    }
    spatial(){
        this.sql.push("spatial")
        return this
    }
    primaryIncrement(){
        this.sql.push("AUTO_INCREMENT")       
        this.primary.push(this._name) 
        return this
    }
    change(column,newColumn = column){
        if(this.sql.length > 0)
            this.sql.push(",")
        this.sql.push("CHANGE")
        this.sql.push("`"+column+"`")
        this.sql.push("`"+newColumn+"`")
        return this
    }
    add(column){
        if(this.sql.length > 0)
            this.sql.push(",")
        this.sql.push("ADD")
        this.sql.push("`"+column+"`")
        return this
    }
    after(column){
        this.sql.push("AFTER")
        this.sql.push(column)
        return this
    }
    foreign(fcolumns){
        this.sql.push("ADD CONSTRAINT")
        this.sql.push("FK_"+this.table+"_"+(typeof fcolumns == "string"?fcolumns:fcolumns.join("_")))
        //return functions of foreign key
        return {
            reference: (parentTable,rcolumns)=>{      
                if(typeof fcolumns == "string"){
                    fcolumns = "`"+fcolumns+"`"
                    rcolumns = "`"+rcolumns+"`"
                }else{
                    fcolumns.map((e,i) => {fcolumns[i]="`"+e+"`"});
                    rcolumns.map((e,i) => {rcolumns[i]="`"+e+"`"});
                }
                this.sql.push(`FOREIGN KEY (${typeof fcolumns == "string"?fcolumns:fcolumns.join(",")})`)
                this.sql.push(`REFERENCES ${parentTable}(${typeof rcolumns == "string"?rcolumns:rcolumns.join(",")})`)
                let onReference = {
                    onDelete: (option)=>{
                        this.sql.push("ON DELETE")                             
                        this.sql.push(option)    
                        return onReference             
                    },
                    onUpdate: (option)=>{
                        this.sql.push("ON UPDATE")   
                        this.sql.push(option)
                        return onReference
                    }
                }
                return onReference
            },            
        }
    }
    dropForeign(colums){
        this.sql.push(`DROP FOREIGN KEY IF EXISTS \`${"FK_"+this.table+"_"+(typeof colums == "string"?colums:colums.join("_"))}\`;`)
    }

    default(value){
        this.sql.push("DEFAULT")
        this.sql.push("'"+value+"'")
    }

    defaultCurrent_Timestamp(){
        this.sql.push("DEFAULT CURRENT_TIMESTAMP")
    }
}

module.exports = Table