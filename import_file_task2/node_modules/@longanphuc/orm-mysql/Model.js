// context SQL 
const Connected = require("./Connect")
const Context = require("./Context")
class Model {
    constructor($table) {
        this.$sql = [""]; // sql query
        this.$param = []; // param sql query
        this.$table = $table; // table name
        this.$primaryKey = []; // primary key name
    }    
    // save data to database
    async save(){
        let insert = [];
        let value = [];
        for (const [key, v] of Object.entries(this)) {
            if(typeof v != "function" && key.indexOf("$") == -1 && this[key] !== undefined){
                insert.push("`"+key+"`")
                value.push("?")
                this.$param.push(v)
            }
        }
        this.$sql[0] = "insert into `"+this.$table+"`"
        this.$sql.push("("+insert.join(",")+")")
        this.$sql.push("values")
        this.$sql.push("("+value.join(",")+")")
        let rs = await Connected(this.$sql.join(" "),this.$param)
        this.$sql = [""]
        if(typeof this.$primaryKey == "string")
            this[this.$primaryKey] = rs[0].insertId
        return rs
    }

    async update(){
        let set = [];
        for (const [key, v] of Object.entries(this)) {
            if(typeof v != "function" && key.indexOf("$") == -1){
                set.push(`\`${key}\` = ?`)
                this.$param.push(v)
            }
        }
        this.$sql[0] = `update \`${this.$table}\` set`
        this.$sql.push(set.join(","))
        let context = new Context()
        if(typeof this.$primaryKey == "string"){
            context.where(this.$primaryKey,this[this.$primaryKey])
            this.$sql = this.$sql.concat(context.sql)
            this.$param = this.$param.concat(context.param)
        }            
        else{
            this.$primaryKey.forEach((e)=>{
                context.where(e,this[e])
            })
            this.$sql = this.$sql.concat(context.sql)
            this.$param = this.$param.concat(context.param)
        }


        let rs = await Connected(this.$sql.join(" "),this.$param)
        this.$sql = [""]
        return rs
    }
    async delete(){
        let context = new Context()
        if(typeof this.$primaryKey == "string"){
            context.where(this.$primaryKey,this[this.$primaryKey])
            this.$sql = this.$sql.concat(context.sql)
            this.$param = this.$param.concat(context.param)
        }            
        else{
            this.$primaryKey.forEach((e)=>{
                context.where(e,this[e])
            })
            this.$sql = this.$sql.concat(context.sql)
            this.$param = this.$param.concat(context.param)
        }
        this.$sql[0] = "delete from `" + this.$table + "`"
        let rs = Connected(this.$sql.join(" "),this.$param)
        this.$sql = [""]
        return rs
    }
    // add attribute data by passing the corresponding object
    add(data){
        Object.keys(data).forEach(e=>{
            this[e] = data[e]
        })
    }

    toObject(){
        let o = {}
        for (const [key, v] of Object.entries(this)) {
            if(typeof v != "function" && key.indexOf("$") == -1 && this[key] !== undefined){
                o[key] = v
            }
        }
        return o
    }
}

module.exports = Model